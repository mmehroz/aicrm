{"version":3,"sources":["views/app-views/scrumboard/reoreder.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderQuoteMap","quoteMap","source","destination","current","droppableId","next","target","index","reordered","renameKey","object","key","newKey","obj","clonedObj","Object","assign","targetKey","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError"],"mappings":"2OAAMA,EAAU,SAACC,EAAMC,EAAYC,GACjC,IAAMC,EAASC,MAAMC,KAAKL,GADoB,EAE5BG,EAAOG,OAAOL,EAAY,GAArCM,EAFuC,oBAI9C,OADAJ,EAAOG,OAAOJ,EAAU,EAAGK,GACpBJ,GAGIK,EAAkB,SAAC,GAAuC,IAAD,EAApCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAC5CC,EAAO,YAAOH,EAASC,EAAOG,cAC9BC,EAAI,YAAOL,EAASE,EAAYE,cAChCE,EAASH,EAAQF,EAAOM,OAG9B,GAAIN,EAAOG,cAAgBF,EAAYE,YAAa,CAClD,IAAMI,EAAYlB,EAChBa,EACAF,EAAOM,MACPL,EAAYK,OAMd,MAAO,CACLP,SALU,2BACPA,GADO,kBAETC,EAAOG,YAAcI,KAc1B,OARAL,EAAQN,OAAOI,EAAOM,MAAO,GAC7BF,EAAKR,OAAOK,EAAYK,MAAO,EAAGD,GAO3B,CACLN,SAPU,2BACPA,GADO,uBAETC,EAAOG,YAAcD,GAFZ,cAGTD,EAAYE,YAAcC,GAHjB,MAaDI,EAAY,SAACC,EAAQC,EAAKC,GACrC,IAHaC,EAGPC,GAHOD,EAGWH,EAHHK,OAAOC,OAAO,GAAIH,IAIjCI,EAAYH,EAAUH,GAG5B,cAFOG,EAAUH,GACjBG,EAAUF,GAAUK,EACbH,GAIMxB,a,2DC/CA,SAAS4B,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIxB,MAAMyB,QAAQD,GAAM,OAAO,OAAAE,EAAA,GAAiBF,GDGzC,CAAkBA,IELZ,SAA0BG,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYT,OAAOO,GAAO,OAAO3B,MAAMC,KAAK0B,GFIvD,CAAgBH,IAAQ,OAAAM,EAAA,GAA2BN,IGLvE,WACb,MAAM,IAAIO,UAAU,wIHIwE,GAL9F","file":"static/js/29.e20a8e55.chunk.js","sourcesContent":["const reorder = (list, startIndex, endIndex) => {\r\n  const result = Array.from(list);\r\n  const [removed] = result.splice(startIndex, 1);\r\n  result.splice(endIndex, 0, removed);\r\n  return result;\r\n};\r\n\r\nexport const reorderQuoteMap = ({ quoteMap, source, destination }) => {\r\n  const current = [...quoteMap[source.droppableId]];\r\n  const next = [...quoteMap[destination.droppableId]];\r\n  const target = current[source.index];\r\n\r\n  // moving to same list\r\n  if (source.droppableId === destination.droppableId) {\r\n    const reordered = reorder(\r\n      current,\r\n      source.index,\r\n      destination.index,\r\n    );\r\n    const result = {\r\n      ...quoteMap,\r\n      [source.droppableId]: reordered,\r\n    };\r\n    return {\r\n      quoteMap: result,\r\n    };\r\n  }\r\n  current.splice(source.index, 1);\r\n  next.splice(destination.index, 0, target);\r\n  const result = {\r\n    ...quoteMap,\r\n    [source.droppableId]: current,\r\n    [destination.droppableId]: next,\r\n  };\r\n\r\n  return {\r\n    quoteMap: result,\r\n  };\r\n};\r\n\r\nconst clone = (obj) => Object.assign({}, obj);\r\n\r\nexport const renameKey = (object, key, newKey) => {\r\n  const clonedObj = clone(object);\r\n  const targetKey = clonedObj[key];\r\n  delete clonedObj[key];\r\n  clonedObj[newKey] = targetKey;\r\n  return clonedObj;\r\n};\r\n\r\n\r\nexport default reorder;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}